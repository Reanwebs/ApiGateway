// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/common/proto/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Autharization_UserSignup_FullMethodName                   = "/pb.Autharization/UserSignup"
	Autharization_OtpRequest_FullMethodName                   = "/pb.Autharization/OtpRequest"
	Autharization_UserLogin_FullMethodName                    = "/pb.Autharization/UserLogin"
	Autharization_ValidName_FullMethodName                    = "/pb.Autharization/validName"
	Autharization_ResendOtp_FullMethodName                    = "/pb.Autharization/ResendOtp"
	Autharization_ForgotPasswordOtp_FullMethodName            = "/pb.Autharization/ForgotPasswordOtp"
	Autharization_ForgotPasswordValidateOtp_FullMethodName    = "/pb.Autharization/ForgotPasswordValidateOtp"
	Autharization_ForgotPasswordChangePassword_FullMethodName = "/pb.Autharization/ForgotPasswordChangePassword"
	Autharization_AdminLogin_FullMethodName                   = "/pb.Autharization/AdminLogin"
	Autharization_GetUsers_FullMethodName                     = "/pb.Autharization/GetUsers"
	Autharization_ManageUser_FullMethodName                   = "/pb.Autharization/ManageUser"
	Autharization_GetInterest_FullMethodName                  = "/pb.Autharization/GetInterest"
	Autharization_AddInterest_FullMethodName                  = "/pb.Autharization/AddInterest"
	Autharization_ManageInterest_FullMethodName               = "/pb.Autharization/ManageInterest"
	Autharization_ValidateUser_FullMethodName                 = "/pb.Autharization/ValidateUser"
	Autharization_GoogleLogin_FullMethodName                  = "/pb.Autharization/GoogleLogin"
	Autharization_ChangeUserName_FullMethodName               = "/pb.Autharization/ChangeUserName"
	Autharization_ChangeEmail_FullMethodName                  = "/pb.Autharization/ChangeEmail"
	Autharization_ChangePassword_FullMethodName               = "/pb.Autharization/ChangePassword"
	Autharization_ChangeEmailVerifyOtp_FullMethodName         = "/pb.Autharization/ChangeEmailVerifyOtp"
	Autharization_ChangePhoneNumberOtp_FullMethodName         = "/pb.Autharization/ChangePhoneNumberOtp"
	Autharization_ChangePhoneNumber_FullMethodName            = "/pb.Autharization/ChangePhoneNumber"
	Autharization_ChangeAvatar_FullMethodName                 = "/pb.Autharization/ChangeAvatar"
	Autharization_RemoveAvatar_FullMethodName                 = "/pb.Autharization/RemoveAvatar"
	Autharization_CreateCommunity_FullMethodName              = "/pb.Autharization/CreateCommunity"
	Autharization_JoinCommunity_FullMethodName                = "/pb.Autharization/JoinCommunity"
	Autharization_LeaveCommunity_FullMethodName               = "/pb.Autharization/LeaveCommunity"
	Autharization_AcceptJoinCommunity_FullMethodName          = "/pb.Autharization/AcceptJoinCommunity"
	Autharization_RemoveMember_FullMethodName                 = "/pb.Autharization/RemoveMember"
	Autharization_AddModerator_FullMethodName                 = "/pb.Autharization/AddModerator"
	Autharization_AddMember_FullMethodName                    = "/pb.Autharization/AddMember"
	Autharization_ChangeCommunityJoinType_FullMethodName      = "/pb.Autharization/ChangeCommunityJoinType"
	Autharization_DeleteCommunity_FullMethodName              = "/pb.Autharization/DeleteCommunity"
	Autharization_ManageCommunity_FullMethodName              = "/pb.Autharization/ManageCommunity"
	Autharization_GetActiveCommunity_FullMethodName           = "/pb.Autharization/GetActiveCommunity"
	Autharization_GetInterstsUser_FullMethodName              = "/pb.Autharization/GetInterstsUser"
	Autharization_GetUserByName_FullMethodName                = "/pb.Autharization/GetUserByName"
	Autharization_GetAllCommunity_FullMethodName              = "/pb.Autharization/GetAllCommunity"
	Autharization_GetCommunityById_FullMethodName             = "/pb.Autharization/GetCommunityById"
	Autharization_ValidateCommunityName_FullMethodName        = "/pb.Autharization/ValidateCommunityName"
	Autharization_GetUserDetails_FullMethodName               = "/pb.Autharization/GetUserDetails"
	Autharization_GetJoinedCommunity_FullMethodName           = "/pb.Autharization/GetJoinedCommunity"
	Autharization_SearchCommunity_FullMethodName              = "/pb.Autharization/SearchCommunity"
)

// AutharizationClient is the client API for Autharization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutharizationClient interface {
	UserSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	OtpRequest(ctx context.Context, in *OtpSignUpRequest, opts ...grpc.CallOption) (*OtpSignUpResponse, error)
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ValidName(ctx context.Context, in *ValidNameRequest, opts ...grpc.CallOption) (*ValidNameResponse, error)
	ResendOtp(ctx context.Context, in *ResendOtpRequest, opts ...grpc.CallOption) (*ResendOtpResponse, error)
	ForgotPasswordOtp(ctx context.Context, in *ForgotPasswordOtpRequest, opts ...grpc.CallOption) (*ForgotPasswordOtpResponse, error)
	ForgotPasswordValidateOtp(ctx context.Context, in *ForgotPasswordValidateOtpRequest, opts ...grpc.CallOption) (*ForgotPasswordValidateOtpResponse, error)
	ForgotPasswordChangePassword(ctx context.Context, in *ForgotPasswordChangePasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordChangePasswordResponse, error)
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	ManageUser(ctx context.Context, in *ManageUserRequest, opts ...grpc.CallOption) (*ManageUserResponse, error)
	GetInterest(ctx context.Context, in *GetInterestRequest, opts ...grpc.CallOption) (*GetInterestResponse, error)
	AddInterest(ctx context.Context, in *AddInterestRequest, opts ...grpc.CallOption) (*AddInterestResponse, error)
	ManageInterest(ctx context.Context, in *ManageInterestRequest, opts ...grpc.CallOption) (*ManageInterestResponse, error)
	ValidateUser(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*ValidateUserResponse, error)
	GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error)
	ChangeUserName(ctx context.Context, in *ChangeUserNameRequest, opts ...grpc.CallOption) (*ChangeUserNameResponse, error)
	ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	ChangeEmailVerifyOtp(ctx context.Context, in *ChangeEmailVerifyOtpRequest, opts ...grpc.CallOption) (*ChangeEmailVerifyOtpResponse, error)
	ChangePhoneNumberOtp(ctx context.Context, in *ChangePhoneNumberOtpRequest, opts ...grpc.CallOption) (*ChangePhoneNumberOtpResponse, error)
	ChangePhoneNumber(ctx context.Context, in *ChangePhoneNumberRequest, opts ...grpc.CallOption) (*ChangePhoneNumberResponse, error)
	ChangeAvatar(ctx context.Context, in *ChangeAvatarRequest, opts ...grpc.CallOption) (*ChangeAvatarResponse, error)
	RemoveAvatar(ctx context.Context, in *RemoveAvatarRequest, opts ...grpc.CallOption) (*RemoveAvatarResponse, error)
	CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CreateCommunityResponse, error)
	JoinCommunity(ctx context.Context, in *JoinCommunityRequest, opts ...grpc.CallOption) (*JoinCommunityResponse, error)
	LeaveCommunity(ctx context.Context, in *LeaveCommunityRequest, opts ...grpc.CallOption) (*LeaveCommunityResponse, error)
	AcceptJoinCommunity(ctx context.Context, in *AcceptJoinCommunityRequest, opts ...grpc.CallOption) (*AcceptJoinCommunityResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error)
	AddModerator(ctx context.Context, in *AddModeratorRequest, opts ...grpc.CallOption) (*AddModeratorResponse, error)
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error)
	ChangeCommunityJoinType(ctx context.Context, in *ChangeCommunityJoinTypeRequest, opts ...grpc.CallOption) (*ChangeCommunityJoinTypeResponse, error)
	DeleteCommunity(ctx context.Context, in *DeleteCommunityRequest, opts ...grpc.CallOption) (*DeleteCommunityResponse, error)
	ManageCommunity(ctx context.Context, in *ManageCommunityRequest, opts ...grpc.CallOption) (*ManageCommunityResponse, error)
	GetActiveCommunity(ctx context.Context, in *GetActiveCommunityRequest, opts ...grpc.CallOption) (*GetActiveCommunityResponse, error)
	GetInterstsUser(ctx context.Context, in *GetInterstsUserRequest, opts ...grpc.CallOption) (*GetInterstsUserResponse, error)
	GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserByNameResponse, error)
	GetAllCommunity(ctx context.Context, in *GetAllCommunityRequest, opts ...grpc.CallOption) (*GetAllCommunityResponse, error)
	GetCommunityById(ctx context.Context, in *GetCommunityByIdRequest, opts ...grpc.CallOption) (*GetCommunityByIdResponse, error)
	ValidateCommunityName(ctx context.Context, in *ValidateCommunityNameRequest, opts ...grpc.CallOption) (*ValidateCommunityNameResponse, error)
	GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error)
	GetJoinedCommunity(ctx context.Context, in *GetJoinedCommunityRequest, opts ...grpc.CallOption) (*GetJoinedCommunityResponse, error)
	SearchCommunity(ctx context.Context, in *SearchCommunityRequest, opts ...grpc.CallOption) (*SearchCommunityResponse, error)
}

type autharizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAutharizationClient(cc grpc.ClientConnInterface) AutharizationClient {
	return &autharizationClient{cc}
}

func (c *autharizationClient) UserSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, Autharization_UserSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) OtpRequest(ctx context.Context, in *OtpSignUpRequest, opts ...grpc.CallOption) (*OtpSignUpResponse, error) {
	out := new(OtpSignUpResponse)
	err := c.cc.Invoke(ctx, Autharization_OtpRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Autharization_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ValidName(ctx context.Context, in *ValidNameRequest, opts ...grpc.CallOption) (*ValidNameResponse, error) {
	out := new(ValidNameResponse)
	err := c.cc.Invoke(ctx, Autharization_ValidName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ResendOtp(ctx context.Context, in *ResendOtpRequest, opts ...grpc.CallOption) (*ResendOtpResponse, error) {
	out := new(ResendOtpResponse)
	err := c.cc.Invoke(ctx, Autharization_ResendOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ForgotPasswordOtp(ctx context.Context, in *ForgotPasswordOtpRequest, opts ...grpc.CallOption) (*ForgotPasswordOtpResponse, error) {
	out := new(ForgotPasswordOtpResponse)
	err := c.cc.Invoke(ctx, Autharization_ForgotPasswordOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ForgotPasswordValidateOtp(ctx context.Context, in *ForgotPasswordValidateOtpRequest, opts ...grpc.CallOption) (*ForgotPasswordValidateOtpResponse, error) {
	out := new(ForgotPasswordValidateOtpResponse)
	err := c.cc.Invoke(ctx, Autharization_ForgotPasswordValidateOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ForgotPasswordChangePassword(ctx context.Context, in *ForgotPasswordChangePasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordChangePasswordResponse, error) {
	out := new(ForgotPasswordChangePasswordResponse)
	err := c.cc.Invoke(ctx, Autharization_ForgotPasswordChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, Autharization_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, Autharization_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ManageUser(ctx context.Context, in *ManageUserRequest, opts ...grpc.CallOption) (*ManageUserResponse, error) {
	out := new(ManageUserResponse)
	err := c.cc.Invoke(ctx, Autharization_ManageUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetInterest(ctx context.Context, in *GetInterestRequest, opts ...grpc.CallOption) (*GetInterestResponse, error) {
	out := new(GetInterestResponse)
	err := c.cc.Invoke(ctx, Autharization_GetInterest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) AddInterest(ctx context.Context, in *AddInterestRequest, opts ...grpc.CallOption) (*AddInterestResponse, error) {
	out := new(AddInterestResponse)
	err := c.cc.Invoke(ctx, Autharization_AddInterest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ManageInterest(ctx context.Context, in *ManageInterestRequest, opts ...grpc.CallOption) (*ManageInterestResponse, error) {
	out := new(ManageInterestResponse)
	err := c.cc.Invoke(ctx, Autharization_ManageInterest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ValidateUser(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*ValidateUserResponse, error) {
	out := new(ValidateUserResponse)
	err := c.cc.Invoke(ctx, Autharization_ValidateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error) {
	out := new(GoogleLoginResponse)
	err := c.cc.Invoke(ctx, Autharization_GoogleLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ChangeUserName(ctx context.Context, in *ChangeUserNameRequest, opts ...grpc.CallOption) (*ChangeUserNameResponse, error) {
	out := new(ChangeUserNameResponse)
	err := c.cc.Invoke(ctx, Autharization_ChangeUserName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error) {
	out := new(ChangeEmailResponse)
	err := c.cc.Invoke(ctx, Autharization_ChangeEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, Autharization_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ChangeEmailVerifyOtp(ctx context.Context, in *ChangeEmailVerifyOtpRequest, opts ...grpc.CallOption) (*ChangeEmailVerifyOtpResponse, error) {
	out := new(ChangeEmailVerifyOtpResponse)
	err := c.cc.Invoke(ctx, Autharization_ChangeEmailVerifyOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ChangePhoneNumberOtp(ctx context.Context, in *ChangePhoneNumberOtpRequest, opts ...grpc.CallOption) (*ChangePhoneNumberOtpResponse, error) {
	out := new(ChangePhoneNumberOtpResponse)
	err := c.cc.Invoke(ctx, Autharization_ChangePhoneNumberOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ChangePhoneNumber(ctx context.Context, in *ChangePhoneNumberRequest, opts ...grpc.CallOption) (*ChangePhoneNumberResponse, error) {
	out := new(ChangePhoneNumberResponse)
	err := c.cc.Invoke(ctx, Autharization_ChangePhoneNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ChangeAvatar(ctx context.Context, in *ChangeAvatarRequest, opts ...grpc.CallOption) (*ChangeAvatarResponse, error) {
	out := new(ChangeAvatarResponse)
	err := c.cc.Invoke(ctx, Autharization_ChangeAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) RemoveAvatar(ctx context.Context, in *RemoveAvatarRequest, opts ...grpc.CallOption) (*RemoveAvatarResponse, error) {
	out := new(RemoveAvatarResponse)
	err := c.cc.Invoke(ctx, Autharization_RemoveAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CreateCommunityResponse, error) {
	out := new(CreateCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_CreateCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) JoinCommunity(ctx context.Context, in *JoinCommunityRequest, opts ...grpc.CallOption) (*JoinCommunityResponse, error) {
	out := new(JoinCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_JoinCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) LeaveCommunity(ctx context.Context, in *LeaveCommunityRequest, opts ...grpc.CallOption) (*LeaveCommunityResponse, error) {
	out := new(LeaveCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_LeaveCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) AcceptJoinCommunity(ctx context.Context, in *AcceptJoinCommunityRequest, opts ...grpc.CallOption) (*AcceptJoinCommunityResponse, error) {
	out := new(AcceptJoinCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_AcceptJoinCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	out := new(RemoveMemberResponse)
	err := c.cc.Invoke(ctx, Autharization_RemoveMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) AddModerator(ctx context.Context, in *AddModeratorRequest, opts ...grpc.CallOption) (*AddModeratorResponse, error) {
	out := new(AddModeratorResponse)
	err := c.cc.Invoke(ctx, Autharization_AddModerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error) {
	out := new(AddMemberResponse)
	err := c.cc.Invoke(ctx, Autharization_AddMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ChangeCommunityJoinType(ctx context.Context, in *ChangeCommunityJoinTypeRequest, opts ...grpc.CallOption) (*ChangeCommunityJoinTypeResponse, error) {
	out := new(ChangeCommunityJoinTypeResponse)
	err := c.cc.Invoke(ctx, Autharization_ChangeCommunityJoinType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) DeleteCommunity(ctx context.Context, in *DeleteCommunityRequest, opts ...grpc.CallOption) (*DeleteCommunityResponse, error) {
	out := new(DeleteCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_DeleteCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ManageCommunity(ctx context.Context, in *ManageCommunityRequest, opts ...grpc.CallOption) (*ManageCommunityResponse, error) {
	out := new(ManageCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_ManageCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetActiveCommunity(ctx context.Context, in *GetActiveCommunityRequest, opts ...grpc.CallOption) (*GetActiveCommunityResponse, error) {
	out := new(GetActiveCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_GetActiveCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetInterstsUser(ctx context.Context, in *GetInterstsUserRequest, opts ...grpc.CallOption) (*GetInterstsUserResponse, error) {
	out := new(GetInterstsUserResponse)
	err := c.cc.Invoke(ctx, Autharization_GetInterstsUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserByNameResponse, error) {
	out := new(GetUserByNameResponse)
	err := c.cc.Invoke(ctx, Autharization_GetUserByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetAllCommunity(ctx context.Context, in *GetAllCommunityRequest, opts ...grpc.CallOption) (*GetAllCommunityResponse, error) {
	out := new(GetAllCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_GetAllCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetCommunityById(ctx context.Context, in *GetCommunityByIdRequest, opts ...grpc.CallOption) (*GetCommunityByIdResponse, error) {
	out := new(GetCommunityByIdResponse)
	err := c.cc.Invoke(ctx, Autharization_GetCommunityById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ValidateCommunityName(ctx context.Context, in *ValidateCommunityNameRequest, opts ...grpc.CallOption) (*ValidateCommunityNameResponse, error) {
	out := new(ValidateCommunityNameResponse)
	err := c.cc.Invoke(ctx, Autharization_ValidateCommunityName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error) {
	out := new(GetUserDetailsResponse)
	err := c.cc.Invoke(ctx, Autharization_GetUserDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) GetJoinedCommunity(ctx context.Context, in *GetJoinedCommunityRequest, opts ...grpc.CallOption) (*GetJoinedCommunityResponse, error) {
	out := new(GetJoinedCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_GetJoinedCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) SearchCommunity(ctx context.Context, in *SearchCommunityRequest, opts ...grpc.CallOption) (*SearchCommunityResponse, error) {
	out := new(SearchCommunityResponse)
	err := c.cc.Invoke(ctx, Autharization_SearchCommunity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutharizationServer is the server API for Autharization service.
// All implementations must embed UnimplementedAutharizationServer
// for forward compatibility
type AutharizationServer interface {
	UserSignup(context.Context, *SignupRequest) (*SignupResponse, error)
	OtpRequest(context.Context, *OtpSignUpRequest) (*OtpSignUpResponse, error)
	UserLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	ValidName(context.Context, *ValidNameRequest) (*ValidNameResponse, error)
	ResendOtp(context.Context, *ResendOtpRequest) (*ResendOtpResponse, error)
	ForgotPasswordOtp(context.Context, *ForgotPasswordOtpRequest) (*ForgotPasswordOtpResponse, error)
	ForgotPasswordValidateOtp(context.Context, *ForgotPasswordValidateOtpRequest) (*ForgotPasswordValidateOtpResponse, error)
	ForgotPasswordChangePassword(context.Context, *ForgotPasswordChangePasswordRequest) (*ForgotPasswordChangePasswordResponse, error)
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	ManageUser(context.Context, *ManageUserRequest) (*ManageUserResponse, error)
	GetInterest(context.Context, *GetInterestRequest) (*GetInterestResponse, error)
	AddInterest(context.Context, *AddInterestRequest) (*AddInterestResponse, error)
	ManageInterest(context.Context, *ManageInterestRequest) (*ManageInterestResponse, error)
	ValidateUser(context.Context, *ValidateUserRequest) (*ValidateUserResponse, error)
	GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error)
	ChangeUserName(context.Context, *ChangeUserNameRequest) (*ChangeUserNameResponse, error)
	ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	ChangeEmailVerifyOtp(context.Context, *ChangeEmailVerifyOtpRequest) (*ChangeEmailVerifyOtpResponse, error)
	ChangePhoneNumberOtp(context.Context, *ChangePhoneNumberOtpRequest) (*ChangePhoneNumberOtpResponse, error)
	ChangePhoneNumber(context.Context, *ChangePhoneNumberRequest) (*ChangePhoneNumberResponse, error)
	ChangeAvatar(context.Context, *ChangeAvatarRequest) (*ChangeAvatarResponse, error)
	RemoveAvatar(context.Context, *RemoveAvatarRequest) (*RemoveAvatarResponse, error)
	CreateCommunity(context.Context, *CreateCommunityRequest) (*CreateCommunityResponse, error)
	JoinCommunity(context.Context, *JoinCommunityRequest) (*JoinCommunityResponse, error)
	LeaveCommunity(context.Context, *LeaveCommunityRequest) (*LeaveCommunityResponse, error)
	AcceptJoinCommunity(context.Context, *AcceptJoinCommunityRequest) (*AcceptJoinCommunityResponse, error)
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	AddModerator(context.Context, *AddModeratorRequest) (*AddModeratorResponse, error)
	AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error)
	ChangeCommunityJoinType(context.Context, *ChangeCommunityJoinTypeRequest) (*ChangeCommunityJoinTypeResponse, error)
	DeleteCommunity(context.Context, *DeleteCommunityRequest) (*DeleteCommunityResponse, error)
	ManageCommunity(context.Context, *ManageCommunityRequest) (*ManageCommunityResponse, error)
	GetActiveCommunity(context.Context, *GetActiveCommunityRequest) (*GetActiveCommunityResponse, error)
	GetInterstsUser(context.Context, *GetInterstsUserRequest) (*GetInterstsUserResponse, error)
	GetUserByName(context.Context, *GetUserByNameRequest) (*GetUserByNameResponse, error)
	GetAllCommunity(context.Context, *GetAllCommunityRequest) (*GetAllCommunityResponse, error)
	GetCommunityById(context.Context, *GetCommunityByIdRequest) (*GetCommunityByIdResponse, error)
	ValidateCommunityName(context.Context, *ValidateCommunityNameRequest) (*ValidateCommunityNameResponse, error)
	GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error)
	GetJoinedCommunity(context.Context, *GetJoinedCommunityRequest) (*GetJoinedCommunityResponse, error)
	SearchCommunity(context.Context, *SearchCommunityRequest) (*SearchCommunityResponse, error)
	mustEmbedUnimplementedAutharizationServer()
}

// UnimplementedAutharizationServer must be embedded to have forward compatible implementations.
type UnimplementedAutharizationServer struct {
}

func (UnimplementedAutharizationServer) UserSignup(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignup not implemented")
}
func (UnimplementedAutharizationServer) OtpRequest(context.Context, *OtpSignUpRequest) (*OtpSignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtpRequest not implemented")
}
func (UnimplementedAutharizationServer) UserLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedAutharizationServer) ValidName(context.Context, *ValidNameRequest) (*ValidNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidName not implemented")
}
func (UnimplementedAutharizationServer) ResendOtp(context.Context, *ResendOtpRequest) (*ResendOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendOtp not implemented")
}
func (UnimplementedAutharizationServer) ForgotPasswordOtp(context.Context, *ForgotPasswordOtpRequest) (*ForgotPasswordOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPasswordOtp not implemented")
}
func (UnimplementedAutharizationServer) ForgotPasswordValidateOtp(context.Context, *ForgotPasswordValidateOtpRequest) (*ForgotPasswordValidateOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPasswordValidateOtp not implemented")
}
func (UnimplementedAutharizationServer) ForgotPasswordChangePassword(context.Context, *ForgotPasswordChangePasswordRequest) (*ForgotPasswordChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPasswordChangePassword not implemented")
}
func (UnimplementedAutharizationServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAutharizationServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAutharizationServer) ManageUser(context.Context, *ManageUserRequest) (*ManageUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageUser not implemented")
}
func (UnimplementedAutharizationServer) GetInterest(context.Context, *GetInterestRequest) (*GetInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterest not implemented")
}
func (UnimplementedAutharizationServer) AddInterest(context.Context, *AddInterestRequest) (*AddInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterest not implemented")
}
func (UnimplementedAutharizationServer) ManageInterest(context.Context, *ManageInterestRequest) (*ManageInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageInterest not implemented")
}
func (UnimplementedAutharizationServer) ValidateUser(context.Context, *ValidateUserRequest) (*ValidateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUser not implemented")
}
func (UnimplementedAutharizationServer) GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (UnimplementedAutharizationServer) ChangeUserName(context.Context, *ChangeUserNameRequest) (*ChangeUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserName not implemented")
}
func (UnimplementedAutharizationServer) ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedAutharizationServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAutharizationServer) ChangeEmailVerifyOtp(context.Context, *ChangeEmailVerifyOtpRequest) (*ChangeEmailVerifyOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmailVerifyOtp not implemented")
}
func (UnimplementedAutharizationServer) ChangePhoneNumberOtp(context.Context, *ChangePhoneNumberOtpRequest) (*ChangePhoneNumberOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhoneNumberOtp not implemented")
}
func (UnimplementedAutharizationServer) ChangePhoneNumber(context.Context, *ChangePhoneNumberRequest) (*ChangePhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhoneNumber not implemented")
}
func (UnimplementedAutharizationServer) ChangeAvatar(context.Context, *ChangeAvatarRequest) (*ChangeAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAvatar not implemented")
}
func (UnimplementedAutharizationServer) RemoveAvatar(context.Context, *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAvatar not implemented")
}
func (UnimplementedAutharizationServer) CreateCommunity(context.Context, *CreateCommunityRequest) (*CreateCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (UnimplementedAutharizationServer) JoinCommunity(context.Context, *JoinCommunityRequest) (*JoinCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCommunity not implemented")
}
func (UnimplementedAutharizationServer) LeaveCommunity(context.Context, *LeaveCommunityRequest) (*LeaveCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCommunity not implemented")
}
func (UnimplementedAutharizationServer) AcceptJoinCommunity(context.Context, *AcceptJoinCommunityRequest) (*AcceptJoinCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptJoinCommunity not implemented")
}
func (UnimplementedAutharizationServer) RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedAutharizationServer) AddModerator(context.Context, *AddModeratorRequest) (*AddModeratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModerator not implemented")
}
func (UnimplementedAutharizationServer) AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedAutharizationServer) ChangeCommunityJoinType(context.Context, *ChangeCommunityJoinTypeRequest) (*ChangeCommunityJoinTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCommunityJoinType not implemented")
}
func (UnimplementedAutharizationServer) DeleteCommunity(context.Context, *DeleteCommunityRequest) (*DeleteCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunity not implemented")
}
func (UnimplementedAutharizationServer) ManageCommunity(context.Context, *ManageCommunityRequest) (*ManageCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageCommunity not implemented")
}
func (UnimplementedAutharizationServer) GetActiveCommunity(context.Context, *GetActiveCommunityRequest) (*GetActiveCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveCommunity not implemented")
}
func (UnimplementedAutharizationServer) GetInterstsUser(context.Context, *GetInterstsUserRequest) (*GetInterstsUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterstsUser not implemented")
}
func (UnimplementedAutharizationServer) GetUserByName(context.Context, *GetUserByNameRequest) (*GetUserByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedAutharizationServer) GetAllCommunity(context.Context, *GetAllCommunityRequest) (*GetAllCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCommunity not implemented")
}
func (UnimplementedAutharizationServer) GetCommunityById(context.Context, *GetCommunityByIdRequest) (*GetCommunityByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityById not implemented")
}
func (UnimplementedAutharizationServer) ValidateCommunityName(context.Context, *ValidateCommunityNameRequest) (*ValidateCommunityNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCommunityName not implemented")
}
func (UnimplementedAutharizationServer) GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedAutharizationServer) GetJoinedCommunity(context.Context, *GetJoinedCommunityRequest) (*GetJoinedCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinedCommunity not implemented")
}
func (UnimplementedAutharizationServer) SearchCommunity(context.Context, *SearchCommunityRequest) (*SearchCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCommunity not implemented")
}
func (UnimplementedAutharizationServer) mustEmbedUnimplementedAutharizationServer() {}

// UnsafeAutharizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutharizationServer will
// result in compilation errors.
type UnsafeAutharizationServer interface {
	mustEmbedUnimplementedAutharizationServer()
}

func RegisterAutharizationServer(s grpc.ServiceRegistrar, srv AutharizationServer) {
	s.RegisterService(&Autharization_ServiceDesc, srv)
}

func _Autharization_UserSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).UserSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_UserSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).UserSignup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_OtpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpSignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).OtpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_OtpRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).OtpRequest(ctx, req.(*OtpSignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ValidName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ValidName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ValidName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ValidName(ctx, req.(*ValidNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ResendOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ResendOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ResendOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ResendOtp(ctx, req.(*ResendOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ForgotPasswordOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ForgotPasswordOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ForgotPasswordOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ForgotPasswordOtp(ctx, req.(*ForgotPasswordOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ForgotPasswordValidateOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordValidateOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ForgotPasswordValidateOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ForgotPasswordValidateOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ForgotPasswordValidateOtp(ctx, req.(*ForgotPasswordValidateOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ForgotPasswordChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ForgotPasswordChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ForgotPasswordChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ForgotPasswordChangePassword(ctx, req.(*ForgotPasswordChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ManageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ManageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ManageUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ManageUser(ctx, req.(*ManageUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetInterest(ctx, req.(*GetInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_AddInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).AddInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_AddInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).AddInterest(ctx, req.(*AddInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ManageInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ManageInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ManageInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ManageInterest(ctx, req.(*ManageInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ValidateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ValidateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ValidateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ValidateUser(ctx, req.(*ValidateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GoogleLogin(ctx, req.(*GoogleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ChangeUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ChangeUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ChangeUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ChangeUserName(ctx, req.(*ChangeUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ChangeEmail(ctx, req.(*ChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ChangeEmailVerifyOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailVerifyOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ChangeEmailVerifyOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ChangeEmailVerifyOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ChangeEmailVerifyOtp(ctx, req.(*ChangeEmailVerifyOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ChangePhoneNumberOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneNumberOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ChangePhoneNumberOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ChangePhoneNumberOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ChangePhoneNumberOtp(ctx, req.(*ChangePhoneNumberOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ChangePhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ChangePhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ChangePhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ChangePhoneNumber(ctx, req.(*ChangePhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ChangeAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ChangeAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ChangeAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ChangeAvatar(ctx, req.(*ChangeAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_RemoveAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).RemoveAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_RemoveAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).RemoveAvatar(ctx, req.(*RemoveAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_CreateCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).CreateCommunity(ctx, req.(*CreateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_JoinCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).JoinCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_JoinCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).JoinCommunity(ctx, req.(*JoinCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_LeaveCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).LeaveCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_LeaveCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).LeaveCommunity(ctx, req.(*LeaveCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_AcceptJoinCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptJoinCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).AcceptJoinCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_AcceptJoinCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).AcceptJoinCommunity(ctx, req.(*AcceptJoinCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_AddModerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddModeratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).AddModerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_AddModerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).AddModerator(ctx, req.(*AddModeratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ChangeCommunityJoinType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCommunityJoinTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ChangeCommunityJoinType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ChangeCommunityJoinType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ChangeCommunityJoinType(ctx, req.(*ChangeCommunityJoinTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_DeleteCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).DeleteCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_DeleteCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).DeleteCommunity(ctx, req.(*DeleteCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ManageCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ManageCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ManageCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ManageCommunity(ctx, req.(*ManageCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetActiveCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetActiveCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetActiveCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetActiveCommunity(ctx, req.(*GetActiveCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetInterstsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterstsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetInterstsUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetInterstsUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetInterstsUser(ctx, req.(*GetInterstsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetUserByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetUserByName(ctx, req.(*GetUserByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetAllCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetAllCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetAllCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetAllCommunity(ctx, req.(*GetAllCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetCommunityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetCommunityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetCommunityById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetCommunityById(ctx, req.(*GetCommunityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ValidateCommunityName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCommunityNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ValidateCommunityName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_ValidateCommunityName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ValidateCommunityName(ctx, req.(*ValidateCommunityNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetUserDetails(ctx, req.(*GetUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_GetJoinedCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).GetJoinedCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_GetJoinedCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).GetJoinedCommunity(ctx, req.(*GetJoinedCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_SearchCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).SearchCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autharization_SearchCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).SearchCommunity(ctx, req.(*SearchCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Autharization_ServiceDesc is the grpc.ServiceDesc for Autharization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Autharization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Autharization",
	HandlerType: (*AutharizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSignup",
			Handler:    _Autharization_UserSignup_Handler,
		},
		{
			MethodName: "OtpRequest",
			Handler:    _Autharization_OtpRequest_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _Autharization_UserLogin_Handler,
		},
		{
			MethodName: "validName",
			Handler:    _Autharization_ValidName_Handler,
		},
		{
			MethodName: "ResendOtp",
			Handler:    _Autharization_ResendOtp_Handler,
		},
		{
			MethodName: "ForgotPasswordOtp",
			Handler:    _Autharization_ForgotPasswordOtp_Handler,
		},
		{
			MethodName: "ForgotPasswordValidateOtp",
			Handler:    _Autharization_ForgotPasswordValidateOtp_Handler,
		},
		{
			MethodName: "ForgotPasswordChangePassword",
			Handler:    _Autharization_ForgotPasswordChangePassword_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _Autharization_AdminLogin_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Autharization_GetUsers_Handler,
		},
		{
			MethodName: "ManageUser",
			Handler:    _Autharization_ManageUser_Handler,
		},
		{
			MethodName: "GetInterest",
			Handler:    _Autharization_GetInterest_Handler,
		},
		{
			MethodName: "AddInterest",
			Handler:    _Autharization_AddInterest_Handler,
		},
		{
			MethodName: "ManageInterest",
			Handler:    _Autharization_ManageInterest_Handler,
		},
		{
			MethodName: "ValidateUser",
			Handler:    _Autharization_ValidateUser_Handler,
		},
		{
			MethodName: "GoogleLogin",
			Handler:    _Autharization_GoogleLogin_Handler,
		},
		{
			MethodName: "ChangeUserName",
			Handler:    _Autharization_ChangeUserName_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _Autharization_ChangeEmail_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Autharization_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeEmailVerifyOtp",
			Handler:    _Autharization_ChangeEmailVerifyOtp_Handler,
		},
		{
			MethodName: "ChangePhoneNumberOtp",
			Handler:    _Autharization_ChangePhoneNumberOtp_Handler,
		},
		{
			MethodName: "ChangePhoneNumber",
			Handler:    _Autharization_ChangePhoneNumber_Handler,
		},
		{
			MethodName: "ChangeAvatar",
			Handler:    _Autharization_ChangeAvatar_Handler,
		},
		{
			MethodName: "RemoveAvatar",
			Handler:    _Autharization_RemoveAvatar_Handler,
		},
		{
			MethodName: "CreateCommunity",
			Handler:    _Autharization_CreateCommunity_Handler,
		},
		{
			MethodName: "JoinCommunity",
			Handler:    _Autharization_JoinCommunity_Handler,
		},
		{
			MethodName: "LeaveCommunity",
			Handler:    _Autharization_LeaveCommunity_Handler,
		},
		{
			MethodName: "AcceptJoinCommunity",
			Handler:    _Autharization_AcceptJoinCommunity_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _Autharization_RemoveMember_Handler,
		},
		{
			MethodName: "AddModerator",
			Handler:    _Autharization_AddModerator_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _Autharization_AddMember_Handler,
		},
		{
			MethodName: "ChangeCommunityJoinType",
			Handler:    _Autharization_ChangeCommunityJoinType_Handler,
		},
		{
			MethodName: "DeleteCommunity",
			Handler:    _Autharization_DeleteCommunity_Handler,
		},
		{
			MethodName: "ManageCommunity",
			Handler:    _Autharization_ManageCommunity_Handler,
		},
		{
			MethodName: "GetActiveCommunity",
			Handler:    _Autharization_GetActiveCommunity_Handler,
		},
		{
			MethodName: "GetInterstsUser",
			Handler:    _Autharization_GetInterstsUser_Handler,
		},
		{
			MethodName: "GetUserByName",
			Handler:    _Autharization_GetUserByName_Handler,
		},
		{
			MethodName: "GetAllCommunity",
			Handler:    _Autharization_GetAllCommunity_Handler,
		},
		{
			MethodName: "GetCommunityById",
			Handler:    _Autharization_GetCommunityById_Handler,
		},
		{
			MethodName: "ValidateCommunityName",
			Handler:    _Autharization_ValidateCommunityName_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _Autharization_GetUserDetails_Handler,
		},
		{
			MethodName: "GetJoinedCommunity",
			Handler:    _Autharization_GetJoinedCommunity_Handler,
		},
		{
			MethodName: "SearchCommunity",
			Handler:    _Autharization_SearchCommunity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/common/proto/auth.proto",
}
