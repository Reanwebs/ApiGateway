// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutharizationClient is the client API for Autharization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutharizationClient interface {
	UserSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	OtpValidation(ctx context.Context, in *OtpValidationRequest, opts ...grpc.CallOption) (*OtpValidationResponse, error)
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ValidName(ctx context.Context, in *ValidNameRequest, opts ...grpc.CallOption) (*ValidNameResponse, error)
}

type autharizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAutharizationClient(cc grpc.ClientConnInterface) AutharizationClient {
	return &autharizationClient{cc}
}

func (c *autharizationClient) UserSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, "/pb.Autharization/UserSignup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) OtpValidation(ctx context.Context, in *OtpValidationRequest, opts ...grpc.CallOption) (*OtpValidationResponse, error) {
	out := new(OtpValidationResponse)
	err := c.cc.Invoke(ctx, "/pb.Autharization/OtpValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.Autharization/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autharizationClient) ValidName(ctx context.Context, in *ValidNameRequest, opts ...grpc.CallOption) (*ValidNameResponse, error) {
	out := new(ValidNameResponse)
	err := c.cc.Invoke(ctx, "/pb.Autharization/validName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutharizationServer is the server API for Autharization service.
// All implementations must embed UnimplementedAutharizationServer
// for forward compatibility
type AutharizationServer interface {
	UserSignup(context.Context, *SignupRequest) (*SignupResponse, error)
	OtpValidation(context.Context, *OtpValidationRequest) (*OtpValidationResponse, error)
	UserLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	ValidName(context.Context, *ValidNameRequest) (*ValidNameResponse, error)
	mustEmbedUnimplementedAutharizationServer()
}

// UnimplementedAutharizationServer must be embedded to have forward compatible implementations.
type UnimplementedAutharizationServer struct {
}

func (UnimplementedAutharizationServer) UserSignup(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignup not implemented")
}
func (UnimplementedAutharizationServer) OtpValidation(context.Context, *OtpValidationRequest) (*OtpValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtpValidation not implemented")
}
func (UnimplementedAutharizationServer) UserLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedAutharizationServer) ValidName(context.Context, *ValidNameRequest) (*ValidNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidName not implemented")
}
func (UnimplementedAutharizationServer) mustEmbedUnimplementedAutharizationServer() {}

// UnsafeAutharizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutharizationServer will
// result in compilation errors.
type UnsafeAutharizationServer interface {
	mustEmbedUnimplementedAutharizationServer()
}

func RegisterAutharizationServer(s grpc.ServiceRegistrar, srv AutharizationServer) {
	s.RegisterService(&Autharization_ServiceDesc, srv)
}

func _Autharization_UserSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).UserSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Autharization/UserSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).UserSignup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_OtpValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).OtpValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Autharization/OtpValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).OtpValidation(ctx, req.(*OtpValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Autharization/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autharization_ValidName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutharizationServer).ValidName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Autharization/validName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutharizationServer).ValidName(ctx, req.(*ValidNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Autharization_ServiceDesc is the grpc.ServiceDesc for Autharization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Autharization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Autharization",
	HandlerType: (*AutharizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSignup",
			Handler:    _Autharization_UserSignup_Handler,
		},
		{
			MethodName: "OtpValidation",
			Handler:    _Autharization_OtpValidation_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _Autharization_UserLogin_Handler,
		},
		{
			MethodName: "validName",
			Handler:    _Autharization_ValidName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/auth/common/pb/auth.proto",
}
